   <!-- <ul>
                {% for category in categories %}
                    <li >
                        <a  href="#">{{ category.name }}</a>
                    </li>
                {% endfor %}
            </ul> -->
            <!-- <form ">
                <button  type="submit">
                    <i></i>
                    Cart
                    <span">0</span">
                </button>
            </form> -->



   {% if messages %}
            {% for message in messages %}
            <div class="alert alert-warning alert-dismissible fade show" role="alert">
            {{ message }}
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
            {% endfor %}
        {% endif %}




  def __len__(self):
        # Retornar el número total de productos en el carrito
        return len(self.cart)
    
   
    
    def get_quants(self):
        # Suponiendo que self.cart es un diccionario donde las claves son IDs de productos
        # y los valores son las cantidades de esos productos
        quantities = {product_id: quantity for product_id, quantity in self.cart.items()}
        return quantities



{% extends 'base/base.html' %}

{% block title %}Resumen del Carrito{% endblock %}

{% block content %}

<!-- Section -->
<br>
<div class="container">
    {% if cart_products %}
        <!-- Iterar sobre cada producto en el carrito -->
        {% for item in cart_products %}
            <div class="card mb-3">
                <div class="row g-0">
                    <div class="col-md-4">
                        <!-- Mostrar imagen del producto -->
                        <img src="{{ item.product.image.url }}" class="img-fluid rounded-start" alt="{{ item.product.name }}">
                    </div>
                    <div class="col-md-8">
                        <div class="card-body">
                            <center>
                                <!-- Nombre del producto -->
                                <h5 class="card-title">{{ item.product.name }}</h5>
                                <br>
                                <!-- Descripción del producto -->
                              
                                <p class="card-text"><small class="text-muted">{{ item.product.description }}</small></p>
                                <!-- Mostrar precio del producto -->
                                {% if item.product.is_sale %}
                                    <div class="d-flex justify-content-center small text-black bg-warning mb-2 p-2">
                                        <div class="bi-star-fill"></div>
                                        <span>&nbsp;&nbsp;¡Ofertas!&nbsp;&nbsp;</span>
                                        <div class="bi-star-fill"></div>
                                    </div>
                                    <!-- Precio con descuento -->
                                    <div>
                                        <del class="text-dark">${{ item.product.price }}</del>
                                        &nbsp;<span class="text-danger">${{ item.product.sale_price }}</span>
                                    </div>
                                {% else %}
                                    <!-- Precio normal -->
                                    <div class="text-dark">${{ item.product.price }}</div>
                                {% endif %}
                                <br>
                                <!-- Mostrar cantidad del producto -->
                                <div class="text-dark">Cantidad: {{ item.quantity }}</div>
                                <div class="text-dark">Total por producto: ${{ item.total_product_price }}</div>
                                <br>

                            </center>
                        </div>
                    </div>
                </div>
            </div>
        {% endfor %}
        <!-- Mostrar precio total del carrito -->
        <div class="container mt-4">
            <div class="row">
                <div class="col-md-12 text-center">
                    <div class="alert alert-info" role="alert">
                        <h4 class="alert-heading">Total a pagar</h4>
                        <p class="lead">$ {{ total_price }}</p>
                    </div>
                </div>
            </div>
        </div>
    {% else %}
        <!-- Mensaje si no hay productos en el carrito -->
        No hay nada en tu carrito...
    {% endif %}
</div>

{% endblock %}



# Verifica si el usuario está autenticado
    if request.user.is_authenticated:
        # Si está autenticado, actualiza su perfil
        current_user = User.objects.get(id=request.user.id)
        user_form = UpdateUserForm(request.POST or None, instance=current_user)
        
        if user_form.is_valid():
            user_form.save()
            login(request, current_user)  # Puede no ser necesario ya que el usuario ya está autenticado
            messages.success(request, "El usuario ha sido actualizado !!")
            return redirect('home')
        return render(request, 'accounts/update_user.html', {'user_form': user_form})

    # Verifica si el usuario está intentando acceder a la página desde el proceso de restablecimiento de contraseña
    elif request.GET.get('password_reset'):
        # Permite acceso a la página de actualización si el usuario está en proceso de restablecimiento de contraseña
        user_form = UpdateUserForm(request.POST or None)
        return render(request, 'accounts/update_user.html', {'user_form': user_form})

    else:
        # Mensaje de error si el usuario no está autenticado y no está en el proceso de restablecimiento de contraseña
        messages.error(request, "Debes iniciar sesión para acceder a esa página !!")
        return redirect('login')


<div class="collapse navbar-collapse" id="navbarSupportedContent">
<div class="nav-links-container">
<ul class="nav-links navbar-nav">
{% if user.is_authenticated %}
<li class="nav-item dropdown">
<a href="#" class="logout-button dropdown-toggle" id="userDropdown" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
    <i class="fa-regular fa-user"></i>
    <ul class="dropdown-menu" aria-labelledby="navbarDropdown">
        <li>
         <a class="dropdown-item" href="{% url 'update_user' %}">Actualizar Usuario</a>
                        <a class="dropdown-item" href="{% url 'update_info' %}">Actualizar Información</a>
                        <div class="dropdown-divider"></div>
                        <a class="dropdown-item" href="{% url 'logout' %}"><i class="fas fa-sign-out-alt"></i> Salir</a>
        </li>
        {% else %}
        <a href="{% url 'login' %}" class="login-button">
                    <i class="fa-regular fa-user"></i>
                </a>
     </ul>
</a>
</li>
 {% endfor %}
</ul>
</div>
</div>
















 <div class="top-banner">
        <div class="banner-text">
            Compra con hasta 6 cuotas sin interés
        </div>
        <div class="auth-links">
            {% if user.is_authenticated %}
                <div class="dropdown">
                    <a href="#" class="logout-button dropdown-toggle" id="userDropdown" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        <i class="fa-regular fa-user"></i>
                    </a>
                    <div class="dropdown-menu dropdown-menu-right" aria-labelledby="userDropdown">
                        <a class="dropdown-item" href="{% url 'update_user' %}">Actualizar Usuario</a>
                        <a class="dropdown-item" href="{% url 'update_info' %}">Actualizar Información</a>
                        <div class="dropdown-divider"></div>
                        <a class="dropdown-item" href="{% url 'logout' %}"><i class="fas fa-sign-out-alt"></i> Salir</a>
                    </div>
                </div>
            {% else %}
                <a href="{% url 'login' %}" class="login-button">
                    <i class="fa-regular fa-user"></i>
                </a>
            {% endif %}
        </div>
    </div>



from store.models import Product
from accounts.models import Profile

class Cart():
    def __init__(self, request):
        self.session = request.session
        # Obtener solicitud
        self.request = request
        cart = self.session.get('session_key')
        if 'session_key' not in request.session:
            cart = self.session['session_key'] = {}
        self.cart = cart 

    def add(self, product, quantity):
        product_id = str(product.id)
        product_qty = str(quantity)
        if product_id in self.cart:
            pass
        else:
            self.cart[product_id] = int(product_qty)
        self.session.modified = True
        # Tratar con el usuario que ha iniciado sesión
        if self.request.user.is_authenticated:
            current_user = Profile.objects.filter(user__id=self.request.user.id)
            
            carty = str(self.cart)
            carty = carty.replace("\'" , "\"")
            current_user.update(old_cart=str(carty))
        
    def __len__(self):
        return len(self.cart)
    
    def get_prods(self):
        product_ids = self.cart.keys()
        products = Product.objects.filter(id__in=product_ids)
        return products
    
    def get_quants(self):
        quantities = self.cart
        return quantities
    
    def update(self, product_id, quantity):
        product_id = str(product_id)
        product_qty = int(quantity)
        self.cart[product_id] = product_qty
        self.session.modified = True
        return self.cart

        if self.request.user.is_authenticated:
            current_user = Profile.objects.filter(user__id=self.request.user.id)
            
            carty = str(self.cart)
            carty = carty.replace("\'" , "\"")
            current_user.update(old_cart=str(carty))
            return self.cart
        
        
        
    def delete(self, product_id):
        product_id = str(product_id)
        if product_id in self.cart:
            del self.cart[product_id]
            self.session.modified = True
            if self.request.user.is_authenticated:
                current_user = Profile.objects.filter(user__id=self.request.user.id)
                carty = str(self.cart)
                carty = carty.replace("\'" , "\"")
                current_user.update(old_cart=str(carty))

    def db_add(self, product, quantity):
        product_id = str(product)
        product_qty = str(quantity)
        if product_id in self.cart:
            pass
        else:
            self.cart[product_id] = int(product_qty)
        self.session.modified = True
        # Tratar con el usuario que ha iniciado sesión
        if self.request.user.is_authenticated:
            current_user = Profile.objects.filter(user__id=self.request.user.id)
            
            carty = str(self.cart)
            carty = carty.replace("\'" , "\"")
            current_user.update(old_cart=str(carty))